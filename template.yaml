AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: An AWS Serverless Application Model template describing your function.

Parameters:
  CognitoClientUrl:
    Type: String
    # AllowedPattern: ^[a-zA-Z0-9]{26}$
  CognitoClientId:
    Type: String
    AllowedPattern: ^[a-zA-Z0-9]{26}$
  CognitoClientSecret:
    Type: String
    AllowedPattern: ^[a-zA-Z0-9]{52}$

Globals:
  Api: {}
  Function:
    AutoPublishAlias: live
    Handler: org.springframework.cloud.function.adapter.aws.FunctionInvoker::handleRequest
    Architectures:
      - arm64
    EphemeralStorage:
      Size: 512
    MemorySize: 256
    Timeout: 15
    Runtime: java21
    RecursiveLoop: Terminate
    Layers:
      - !Ref DependencyLayer
    RuntimeManagementConfig:
      UpdateRuntimeOn: Auto
    EventInvokeConfig:
      MaximumEventAgeInSeconds: 60
      MaximumRetryAttempts: 0
      DestinationConfig: { }
    SnapStart:
      ApplyOn: PublishedVersions

Resources:
  DependencyLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: api/application/core/build/libs.zip
      LayerName: dependencies
      CompatibleArchitectures:
        - arm64
      CompatibleRuntimes:
        - java21

  authLambda:
    Type: AWS::Serverless::Function
    dependsOn:
      - DependencyLayer
    Metadata:
      BuildMethod: makefile
    Properties:
      AutoPublishAliasAllProperties: true
      CodeUri: ./api
      PackageType: Zip
      Environment:
        Variables:
          COGNITO_CLIENT_URL: !Ref CognitoClientUrl
          COGNITO_CLIENT_ID: !Ref CognitoClientId
          COGNITO_CLIENT_SECRET: !Ref CognitoClientSecret
          MAIN_CLASS: com.ppojin.sl.oauth2.ServerlessOauth2Application
          FUNCTION_NAME: apiGatewayEventHandler
      Events:
        Oauth2:
          Type: Api
          Properties:
            Path: /oauth2
            Method: GET
            RestApiId: !Ref testApi
            Auth:
              Authorizer: NONE

  pocLambda:
    Type: AWS::Serverless::Function
    dependsOn:
      - DependencyLayer
    Metadata:
      BuildMethod: makefile
    Properties:
      AutoPublishAliasAllProperties: true
      CodeUri: ./api
      PackageType: Zip
      Environment:
        Variables:
          MAIN_CLASS: com.ppojin.sl.poc.PocApplication
          FUNCTION_NAME: pocRouter
      Events:
        UppercaseRead:
          Type: Api
          Properties:
            Path: /uppercase
            Method: GET
            RestApiId: !Ref testApi
            Auth:
              Authorizer: NONE
        UppercaseCreate:
          Type: Api
          Properties:
            Path: /uppercase
            Method: POST
            RestApiId: !Ref testApi
            Auth:
              Authorizer: NONE
        reversed:
          Type: Api
          Properties:
            Path: /reversed
            Method: GET
            RestApiId: !Ref testApi
            Auth:
              Authorizer: NONE

  testApi:
    Type: AWS::Serverless::Api
    dependsOn:
      - authLambda
      - pocLambda
    Properties:
      DisableExecuteApiEndpoint: true
      EndpointConfiguration:
        Type: REGIONAL
      # Cors:
      #   MaxAge: 5
      Name: !Sub
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: Api
      StageName: Prod
      DefinitionBody:
        openapi: '3.0'
        info: { }
        paths:
          /uppercase:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${pocLambda.Arn}:live/invocations
              responses: { }
          /reversed:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${pocLambda.Arn}:live/invocations
              responses: { }
          /oauth2:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${authLambda.Arn}:live/invocations
              responses: { }
      TracingEnabled: false
      # Cors:
      #   AllowMethods: "'POST, GET'"
      #   AllowHeaders: "'X-Forwarded-For'"
      #   AllowOrigin: "'https://example.com'"
      #   MaxAge: "'600'"
      #   AllowCredentials: true
      Auth:
        ResourcePolicy:
          CustomStatements: [
            {
              "Effect": "Allow",
              "Principal": "*",
              "Action": "execute-api:Invoke",
              "Resource": "execute-api:/Prod/*",
              "Condition": {
                "IpAddress": {
                  "aws:SourceIp": [
                    "173.245.48.0/20", "103.21.244.0/22", "103.22.200.0/22", "103.31.4.0/22", "141.101.64.0/18",
                    "108.162.192.0/18", "190.93.240.0/20", "188.114.96.0/20", "197.234.240.0/22", "198.41.128.0/17",
                    "162.158.0.0/15", "104.16.0.0/13", "104.24.0.0/14", "172.64.0.0/13", "131.0.72.0/22",
                    "2400:cb00::/32", "2606:4700::/32", "2803:f800::/32", "2405:b500::/32",
                    "2405:8100::/32",
                    "2a06:98c0::/29",
                    "2c0f:f248::/32"
                  ]
                }
              }
            }
          ]

  ApiDomainNameCert:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: www.ppojin.com
      SubjectAlternativeNames:
        - www.ppojin.com
      ValidationMethod: DNS

  ApiDomainName:
   Type: AWS::ApiGatewayV2::DomainName
   Properties:
     DomainName: www.ppojin.com
     DomainNameConfigurations:
       - EndpointType: REGIONAL
         CertificateArn: !Ref ApiDomainNameCert
         CertificateName: testApi

  MyApiMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    DependsOn: ApiDomainName
    Properties:
      DomainName: www.ppojin.com
      ApiId: !Ref testApi
      Stage: Prod
